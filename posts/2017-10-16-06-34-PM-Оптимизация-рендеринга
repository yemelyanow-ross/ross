---
preview: Порядок рендеринга страницы в браузере:
1. На основании полученного HTML строится DOM-дерево
2. На основании полученного CSS строится CSSOM-дерево
3. Применительно к построенным DOM и CSSOM выполняются скрипты.
4. На основе DOM и CSSOM формируется дерево рендеринга
5. На основании дерева рендеринга генерируется макет страницы с указанием размеров и координат всех элементов.
6. На основании дерева рендеринга генерируется макет страницы с указанием размеров и координат всех элементов.
title: Оптимизация фронтенда под браузеры
tags: оптимизация, рендеринг, -----post-locked-by:yemelyanow-ross
author: yemelyanow-ross
date: 2017-10-16 21:29:00
---
![](https://habrastorage.org/files/4f6/a53/6cf/4f6a536cfa8b4a45a6810c160c206cdb.png)

1. HTML
	-	Стили — в первую очередь, скрипты — в последнюю
	- Минификация и компрессия.
	- Повышение доступности (ARIA-атрибуты, тэг alt, Semantic HTML, формы: метки, обязательные поля, типы вводимых данных, паттерны ввода; тестирование на разных браузерах)
2. CSS
	Построение CSSOM-дерева блокирует процесс рендеринга страницы. Поэтому в рамках дерева рендеринга необходимо загружать стили как можно раньше и максимально уменьшать их размер. Там, где это будет эффективно, необходимо применять отложенную загрузку стилей.
	- использование медиа-атрибутов
	- отложенная загрузка CSS.
	- cнижение специфичности.
	- доставка только необходимого (напр. удаление из CSS неизпользующихся стилей)
3. JavaScript
	- асинхронная загрузка скриптов (async - рекомендуется для скриптов которые не влияют на DOM или CSSOM,  внешних не зависящих от кода страницы скриптов)
	- отложенная загрузка скриптов (defer - для скриптов влияющих на дерево рендеринга, но не критичных для загрузки первого экрана, а так-же не зависящих от загрузки других скриптов)
	- клонирование узлов перед последующими манипуляциями (т.е. сначала клонировать узел DOM, внести в клон изменения а потом заменить оригинал клоном)
	- использование атрибутов Preload/ Prefetch/ Prerender/ Preconnect (http://prgssr.ru/development/tehniki-prefetchinga-dlya-uluchsheniya-proizvoditelnosti-sajtov.html, https://www.searchengines.ru/ispolzovanie-preload-prefetch-i-preconnect.html)
4. Дерево рендеринга
5. Макет страницы
6. Вывод на экран
---------------------------------------------------------------------
Critical Rendering Path, CRP - критический путь рендеринга
	- длина пути
	- размер критически важных ресурсов (в байтах, необходимых для рендеринга)
	- количество файлов с критически важными ресурсами

![](https://habrastorage.org/files/d58/4d3/f68/d584d3f68ef44c72986d4a6f435b017f.png)
*Метрики CRP: длина – 4, количество файлов – 9, размер данных – 30 Кб*

- Использование [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)
- Использование Chrome Developer Tools
- Разработка сайтов в комфортном окружении, а тестирование — в неблагоприятных условиях.
- Объединение ресурсов/ файлов.
- Размещение внутренних стилей для контента начального экрана (above the fold) в разделе header.
- Минификация/ обрезка изображений.
- Откладывание загрузки изображений до завершения загрузки страницы
- Асинхронная загрузка шрифтов.
- Избавьтесь от лишних JavaScript/ CSS.
- CDNы