---
preview: repaint (или restyle) -  изменение тех стилей элемента, которые не влияют на его размеры и положение на странице  (например, background-color, border-color, visibility),  браузер просто отрисовывает элемент заново, с учётом нового стиля.
	reflow - изменение тех стилей элемнта, которые затрагивают содержимое,  структуру элемента и положение на странице. Напр. :
	- Манипуляции с DOM (добавление, удаление, изменение, перестановка элементов);
	- Изменение содержимого, в т.ч. текста в полях форм;
	- Расчёт или изменение CSS-свойств;
	- Добавление, удаление таблиц стилей;
	- Манипуляции с атрибутом «class»;
	- Манипуляции с окном браузера — изменения размеров, прокрутка;
	- Активация псевдо-классов (например, :hover).
title: Reflow & repaint
tags: reflow, repaint, scroll, -----post-locked-by:yemelyanow-ross
author: yemelyanow-ross
date: 2017-10-24 06:48:00
---

Браузеры по возможности локализуют repaint и reflow в пределах элементов, подвергнувшимися изменению. Например, изменение размеров абсолютно или фиксировано спозиционированного элемента затронет только сам элемент и его потомков, в то время как изменение статично спозиционированного — повлечет reflow всех элементов, следующих за ним.
Ещё одна особенность — во время выполнения JavaScript браузеры кэшируют вносимые изменения, и применяют их в один проход по завершению работы блока кода, т.е. стараются делать как можно меньше reflow и repaint.

*Отключение  :hover анимации во время скроллинга:*

[pointer-events](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events)  - 

```
.disable-hover {
  pointer-events: none;
}
```

```
var body = document.body,
    timer;

window.addEventListener('scroll', function() {
  clearTimeout(timer);
  if(!body.classList.contains('disable-hover')) {
    body.classList.add('disable-hover')
  }
  
  timer = setTimeout(function(){
    body.classList.remove('disable-hover')
  },500);
}, false);
```
Вешаем обработчик на событие скрола, в котором сперва сбрасываем предыдущий таймер, проверяем наличие класса на нашем body, и, если его нет – добавляем. Затем просто добавляем новый таймер, который, через пол секунды после окончания скрола, сбросит наш класс.
Если где-то в странице будут элементы со стилем pointer-events: auto, они перетрут глобальный класс, и будут все еще тормозить., в этом случае:
```
.disable-hover,
.disable-hover * {
  pointer-events: none !important;
}
```


**Практические советы по оптимизации:**
	- стили в <head>, скрипты — в конце <body>.
	- минимизация и упрощение селекторов CSS. Чем меньше вложенность тем лучше
		эффективность: #id -> .class -> div -> a+i -> ul>li -> * -> input[type="text"] -> a:hover
	- минимизация работы с DOM. Кеширование всего обьектов, свойств, если будет 
		повторное использование. При сложных операциях - обработка в "офлайне" а 
		потом вставка целого в DOM.
	- для изменения стилей элементов лучше модифицировать только атрибут «class», и 
		как можно глубже в дереве DOM,
	- анимировать желательно только абсолютно и фиксировано спозиционированные 
		элементы.
	- отключать сложные :hover анимации во время скроллинга