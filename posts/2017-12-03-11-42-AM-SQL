---
preview: Для того, чтобы создать таблицу в SQL, используется выражение CREATE TABLE. Оно принимает в качестве параметров все колонки, которые мы хотим внести, а также их типы данных.
title: SQL
tags: sql
author: yemelyanow-ross
date: 2017-12-03 13:35:00
---
Напр.
```
CREATE TABLE months (
id int,
name varchar(10), 
days int,
PRIMARY KEY (name)
);
```

где months - название таблицы, id, name, days - колонки таблицы.
int - целочисленный тип
varchar(10) - строка с максимальной длиной 10 символов
PRIMARY KEY () - колонка значения в которой уникальны (обычно id, но можно и другое)

добавление данных с помощью комманды INSERT:
```
INSERT INTO months (id,name,days) VALUES (2,'February',29);
```
В случае, если мы не укажем одну из колонок, на её место будет записано NULL или заданное значение по умолчанию

Что-бы покзать данные в таблице используется SELECT ... FROM ...  :
```
SELECT  *  FROM characters
```
Результатом данного запроса будет таблица со всеми данными в таблице** characters**. Знак звёздочки (\*) означает то, что мы хотим показать все столбцы из таблицы без исключений.
Если необходимы лишь некоторые столбцы из таблицы, то вы можете указать их имена через запятую вместо звёздочки:
```
SELECT name, weapon FROM characters
```
Для того чтоб отсортировать выводимые данные используется ORDER BY «название столбца» МОДИФИКАТОР. Модификатор - либо ASC (по возрастанию - по умолчанию) и DESC (по убыванию).
```
SELECT name, weapon FROM "characters" ORDER BY name DESC
```

Для фильтрации выводимых данных по услоию используется выражение WHERE.
```
SELECT * 
FROM characters
WHERE weapon = 'pistol';
```
Условия в WHERE могут быть написаны с использованием логических операторов (AND/OR) и математические операторы сравнения (=, <, >, <=, >=, <>).
```
SELECT * 
FROM albums 
WHERE genre = 'rock' AND sales_in_millions <= 50 
ORDER BY released
```

Условия в WHERE могут быть записаны с использованием ещё нескольких команд: 
IN — сравнивает значение в столбце с несколькими возможными значениями и возвращает true, если значение совпадает хотя бы с одним из значением
BETWEEN — проверяет, находится ли значение в каком-то промежутке
LIKE — ищет по шаблону
```
SELECT * FROM albums WHERE genre IN ('pop','soul');// ищет в жанрах поп и соул
SELECT * FROM albums WHERE released BETWEEN 1975 AND 1985;// ищет между 75 и 85
SELECT * FROM albums WHERE album LIKE '%R%';// в названии есть буква R
```
% - любая последовательность символов (в т.ч. 0). Если начинается с R то - R%

Так-же можно для любого логического выражения использовать инверсию (NOT),  напр: NOT BETWEEN

**ФУНКЦИИ**
COUNT() - возвращает число строк
SUM() -  возвращает сумму всех полей с числовыми значениями в них
AVG() - возвращает среднее значение среди строк
MIN()/MAX() - возвращает минимальное/максимальное значение среди строк

```
SELECT MAX(released) FROM albums;
```

Вложенные SELECTы:
```
SELECT artist,album,released 
FROM albums 
WHERE released = (
 SELECT MIN(released) FROM albums
);
```

Что-бы вывести информацию из связанных таблиц надо их подключить например с помощью INNER JOIN   ...  ON:
```
SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON
Orders.CustomerID=Customers.CustomerID;
```

Псевдонимы:
Что-бы сделать название столбца понятнее можно назначить ему псевдоним - AS:
```
SELECT games.name, games.genre, devs.name AS developer, devs.country 
FROM video_games AS games 
INNER JOIN game_developers AS devs 
ON games.developer_id = devs.id;
```

Что-бы изменить данные в таблице используется параметр UPDATE
```
UPDATE tv_series // название таблицы в которой надо поменять значение
SET genre = 'drama' // значение которое надо поменять
WHERE name = 'Game of Thrones'; //строка, которую надо поменять
```

Что-бы удалить *некоторые* данные из таблицы используют DELETE:
```
DELETE FROM tv_series //откуда удалить
WHERE id = 4; //что удалить
```

Что-бы удалить *все* данные но оставить саму таблицу используют TRUNCATE:
```
TRUNCATE TABLE table_name;
```

Для удаления *всей таблицы* используют DROP:
```
DROP TABLE table_name;
```