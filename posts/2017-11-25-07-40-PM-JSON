---
preview: Данные в формате представляют собой:
* JavaScript-объекты { ... }  или
* Массивы [ ... ]  или
* Значения одного из типов:
   * строки в двойных кавычках,
	 * число,
	 * логическое значение true/false,
   * null
   
title: JSON
tags: js, json, , -----post-locked-by:yemelyanow-ross
author: yemelyanow-ross
date: 2017-11-25 21:32:00
---
Методы: 

**JSON.parse(str)**  - переводит строку с данными в формате JSON в JavaScript-объект/массив/значение
```
let numbers = "[0, 1, 2, 3]";

numbers = JSON.parse(numbers);

alert( numbers[1] ); // 1
```

```
var user = '{ "name": "Вася", "age": 35, "isAdmin": false, "friends": [0,1,2,3] }';

user = JSON.parse(user);

alert( user.friends[1] ); // 1
```

JSON.parse(str, reviver) - где reviver - функция function(key, value). При парсинге JSON.parse передаёт ей все пары ключ: значение, а она либо возвращает преобразованное значение либо undefined, если его нужно пропустить.

```
var str = '{"title":"Конференция","date":"2014-11-30T12:00:00.000Z"}';

var event = JSON.parse(str);

alert( event.date.getDate() ); // ошибка! т.к. event.date здесь строка, а не обьект!!!
```
с помощью  reviver:
```
var str = '{"title":"Конференция","date":"2014-11-30T12:00:00.000Z"}';

var event = JSON.parse(str, function(key, value) {
  if (key == 'date') return new Date(value);
  return value;
});

alert( event.date.getDate() );
```

**JSON.stringify(value, replacer, space)** - преобразует («*сериализует*») значение в JSON-строку.
```
var event = {
  title: "Конференция",
  date: "сегодня"
};

var str = JSON.stringify(event);
alert( str ); // {"title":"Конференция","date":"сегодня"}
```

**!!! При сериализации объекта вызывается его метод toJSON.
 Если такого метода нет – перечисляются его свойства, кроме функций. !!!**

* Порядок преобразования в строку свойств объектов, не являющихся массивами, не гарантируется. Не полагайтесь на порядок свойств во время преобразования.

* Объекты Boolean, Number и String преобразуются в соответствующие примитивные значения, в соответствии с традиционным соглашением о семантике преобразований.

* Значение undefined, функция или Symbol, встреченные во время преобразования, будут либо опущены (если они найдены в объекте), либо превращены в null (если они найдены в массиве).

* Все свойства, имеющие ключ в виде Symbol, будут полностью проигнорированы, даже при использовании функции replacer.

Параметр ***replacer ***: 
	Если является функцией: преобразует значения и свойства по ходу их 
			преобразования в строку; 
	Если является массивом: определяет набор свойств, включаемых в объект в 
			окончательной строке.

Параметр ***space*** может использоваться для управления форматированием отступов в конечной строке. Если он числовой, каждый последующий уровень вложенности будет дополнен отступом из пробелов, количество которых соответствует уровню (вплоть до десятого уровня). Если он строковый, каждый последующий уровень вложенности будет предваряться этой строкой (или её первыми десятью символами).
пример: 
```
JSON.stringify({ a: 2 }, null, ' ');
// '{
//  "a": 2
// }

JSON.stringify({ uno: 1, dos: 2 }, null, '\t');
// вернёт строку:
// '{
// 	"uno": 1,
// 	"dos": 2
// }'
```